---
// Layouts
import Layout from "../layouts/Layout.astro";

// Components
import HeaderContent from "../components/HeaderContent.astro";
import MainContent from "../components/MainContent.astro";
---

<Layout>
  <div class="container">
    <div class="row">

      <HeaderContent />
      <MainContent />      
      
    </div>
  </div>
</Layout>

<script is:inline>
  // Configuración inicial
  let currentConfig = {
    title: "🌟 INFORME DE HABILIDAD",
    characterLabel: "Personaje",
    defaultAnalysis: "Resultado estándar de la acción",
    defaultRecommendation: "Sigue practicando para mejorar",
  };

  let currentSkills = [
    {
      name: "Piloto ✈️",
      messages: [
        "¡Impacto inminente!",
        "Error de navegación",
        "Aterrizaje forzoso",
        "Vuelo estable",
        "¡Acrobacias espaciales perfectas!",
      ],
      analysis: [
        "Desastre total en el vuelo",
        "Necesita más horas de práctica",
        "Aterrizaje aceptable",
        "Vuelo controlado",
        "Maniobras perfectas",
      ],
      recommendations: [
        "Revisar manual de vuelo",
        "Practicar en simulador",
        "Tomar lecciones adicionales",
        "Mantener el buen trabajo",
        "¡Eres un as del aire!",
      ],
    },
    {
      name: "Combate 🔫",
      messages: [
        "¡Arma encasquillada!",
        "Disparo errado",
        "Daño parcial",
        "Blanco neutralizado",
        "¡Disparo crítico!",
      ],
      analysis: [
        "Fallo catastrófico",
        "Necesita entrenamiento",
        "Resultado aceptable",
        "Buen desempeño",
        "Excelente puntería",
      ],
      recommendations: [
        "Revisar el arma",
        "Practicar puntería",
        "Mejorar técnica",
        "Mantener precisión",
        "¡Eres un francotirador!",
      ],
    },
  ];

  // Verificación inicial al cargar la página
  document.addEventListener("DOMContentLoaded", function () {
    const webhookURL = localStorage.getItem("discordWebhookURL");
    const backButton = document.getElementById("backwhurl");
    const webhookForm = document.getElementById("webhook-form");
    const dadosSection = document.getElementById("dados-section");

    if (webhookURL) {
      webhookForm.style.display = "none";
      dadosSection.style.display = "block";
      backButton.style.display = "block";

      // Actualizar dropdown con habilidades actuales
      actualizarDropdownHabilidades();
    } else {
      webhookForm.style.display = "block";
      dadosSection.style.display = "none";
      backButton.style.display = "none";
    }
  });

  function resetWebhookConfig() {
    // Limpiar el webhook almacenado
    localStorage.removeItem("discordWebhookURL");

    // Restablecer el campo de URL
    document.getElementById("webhook-url").value = "";

    // Mostrar el formulario de configuración
    document.getElementById("webhook-form").style.display = "block";

    // Ocultar la sección de habilidades
    document.getElementById("dados-section").style.display = "none";

    // Ocultar el botón "Nuevo Webhook"
    document.getElementById("backwhurl").style.display = "none";

    // Limpiar resultados anteriores
    document.getElementById("result").style.display = "none";
  }

  function actualizarDropdownHabilidades() {
    const skillSelect = document.getElementById("skill-name");
    skillSelect.innerHTML = ""; // Limpiar opciones existentes

    currentSkills.forEach((skill) => {
      const option = document.createElement("option");
      option.value = skill.name;
      option.textContent = skill.name;
      skillSelect.appendChild(option);
    });
  }

  function guardarWebhook() {
    const url = document.getElementById("webhook-url").value.trim();

    if (!url.startsWith("https://discord.com/api/webhooks/")) {
      alert("ERROR: ENLACE DE WEBHOOK NO VÁLIDO");
      return;
    }

    localStorage.setItem("discordWebhookURL", url);
    document.getElementById("webhook-form").style.display = "none";
    document.getElementById("dados-section").style.display = "block";
    document.getElementById("backwhurl").style.display = "block";

    // Limpiar campo de nombre de personaje para nueva simulación
    document.getElementById("character-name").value = "";
  }

  document.getElementById("loadJson").addEventListener("change", function (e) {
    const file = e.target.files[0];
    if (!file) return;

    const reader = new FileReader();
    reader.onload = function (e) {
      try {
        const config = JSON.parse(e.target.result);

        // Actualizar configuración general
        if (config.config) {
          currentConfig = {
            ...currentConfig,
            ...config.config,
          };
        }

        // Actualizar habilidades
        if (config.skills && Array.isArray(config.skills)) {
          currentSkills = config.skills;
          actualizarDropdownHabilidades();
        }

        alert("Configuración personalizada cargada correctamente");
      } catch (error) {
        alert("Error: El archivo JSON no es válido\n" + error.message);
        console.error(error);
      }
    };
    reader.readAsText(file);
  });

  function copiarJsonBase() {
    const jsonBase = JSON.stringify(
      {
        config: currentConfig,
        skills: currentSkills,
      },
      null,
      2
    );

    navigator.clipboard
      .writeText(jsonBase)
      .then(() => alert("JSON base copiado al portapeles"))
      .catch((err) => console.error("Error al copiar:", err));
  }

  function determinarResultado(puntos, tirada) {
    const porcentajeExito = puntos * 20;
    const umbrales = [
      {
        max: 20,
        texto: "FALLO CRÍTICO 💥 ¡SISTEMA COLAPSADO!",
        descripcion:
          "La acción ha fallado catastróficamente con consecuencias graves.",
        clase: "critical",
      },
      {
        max: 40,
        texto: "FALLO TÉCNICO 🛠️",
        descripcion: "El intento no tuvo éxito pero sin daños colaterales.",
        clase: "failure",
      },
      {
        max: 60,
        texto: "ÉXITO PARCIAL ⚡",
        descripcion: "Logro conseguido pero con complicaciones.",
        clase: "partial",
      },
      {
        max: 80,
        texto: "ÉXITO TOTAL ✅",
        descripcion: "La operación se completó según lo planeado.",
        clase: "success",
      },
      {
        max: 100,
        texto: "ÉXITO SOBRESALIENTE 🚀",
        descripcion: "Resultado excepcional con beneficios adicionales.",
        clase: "epic",
      },
    ];

    const porcentajeReal = puntos >= 5 ? 100 : porcentajeExito;
    const porcentajeObtenido = (tirada / 20) * 100;
    const porcentajeEfectivo = (porcentajeObtenido * porcentajeReal) / 100;

    for (let umbral of umbrales) {
      if (porcentajeEfectivo <= umbral.max) {
        return {
          texto: umbral.texto,
          descripcion: umbral.descripcion,
          clase: umbral.clase,
          porcentaje: Math.round(porcentajeEfectivo),
        };
      }
    }

    return {
      texto: "ÉXITO SOBRESALIENTE 🚀",
      descripcion: "Resultado excepcional con beneficios adicionales.",
      clase: "epic",
      porcentaje: 100,
    };
  }

  async function tirarDados() {
    const webhookURL = localStorage.getItem("discordWebhookURL");
    if (!webhookURL) {
      alert("ERROR: SISTEMA NO CONFIGURADO");
      return;
    }

    const characterName = document
      .getElementById("character-name")
      .value.trim();
    if (!characterName) {
      alert("ERROR: NOMBRE NO ESPECIFICADO");
      return;
    }

    const skillPoints = parseInt(document.getElementById("skill-points").value);
    if (skillPoints < 1 || skillPoints > 6) {
      alert("ERROR: NIVEL DE HABILIDAD INVÁLIDO");
      return;
    }

    const skillName = document.getElementById("skill-name").value;
    const tirada = Math.floor(Math.random() * 20) + 1;
    const resultado = determinarResultado(skillPoints, tirada);
    const skill = currentSkills.find((s) => s.name === skillName) || {};

    // Obtener mensajes personalizados
    const resultIndex = Math.min(Math.floor(resultado.porcentaje / 20), 4);
    const skillMessage =
      skill.messages?.[resultIndex] || "Resultado no definido";
    const analysis =
      skill.analysis?.[resultIndex] || currentConfig.defaultAnalysis;
    const recommendation =
      skill.recommendations?.[resultIndex] ||
      currentConfig.defaultRecommendation;

    // Mostrar resultado local
    const resultDiv = document.getElementById("result");
    resultDiv.style.display = "block";
    resultDiv.className = resultado.clase;
    resultDiv.innerHTML = `
      <h3>📊 RESULTADO DE SIMULACIÓN</h3>
      <p><strong>${characterName}</strong> en <strong>${skillName}</strong> (Nivel ${skillPoints})</p>
      <p>🎲 Tirada: ${tirada}/20</p>
      <p>📈 Eficiencia: ${resultado.porcentaje}%</p>
      <p>💬 <strong>${skillMessage}</strong></p>
      <p>${analysis}</p>
      <p class="${resultado.clase}">${resultado.texto}</p>
      <p>► RECOMENDACIÓN: ${recommendation}</p>
    `;

    // Crear mensaje para Discord (formato mejorado)
    const discordMessage = [
      `**${currentConfig.title}**`,
      `**${currentConfig.characterLabel}:** ${characterName}`,
      `**Habilidad:** ${skillName} (Nivel ${skillPoints})`,
      `**Tirada:** ${tirada}/20 → **${resultado.texto}**`,
      `**Eficiencia:** ${resultado.porcentaje}%`,
      `**Resultado:** ${skillMessage}`,
      `**Análisis:** ${analysis}`,
      `**► RECOMENDACIÓN:** ${recommendation}`,
    ].join("\n");

    // Enviar a Discord
    try {
      const response = await fetch(webhookURL, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          content: discordMessage,
          allowed_mentions: { parse: [] },
        }),
      });

      if (!response.ok) {
        throw new Error(`Error HTTP: ${response.status}`);
      }

      console.log("Mensaje enviado con éxito a Discord");
    } catch (error) {
      console.error("Error al enviar a Discord:", error);
      alert(
        "Error al enviar a Discord. Verifica la consola para más detalles."
      );
    }
  }
</script>